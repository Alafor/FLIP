<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hk.flip.Class">
	
	
	<!-- 강의 추가 하기 -->
	<insert id="c_classinsert" parameterType="ClassDto">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT class_seq.nextval FROM DUAL
		</selectKey>
		INSERT INTO CLASS(
		seq,regdate,class_member_seq,class_type,class_name ,class_area,class_depa,class_participation,
		class_starttime,class_img,class_sd ,class_cd,class_detail,class_week,class_time,class_info ,
		class_price,class_termin)
		VALUES(
		#{seq},sysdate,#{class_member_seq},#{class_type},#{class_name },#{class_area},
		#{class_depa},#{class_participation},#{class_starttime},#{class_img},#{class_sd },
		#{class_cd},#{class_detail},#{class_week},#{class_time},#{class_info },#{class_price},
		'N'
		)
	</insert>
	<insert id="w_classinsert" parameterType="ClassDto">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT class_seq.nextval FROM DUAL
		</selectKey>
		INSERT INTO CLASS(
		seq,regdate,class_member_seq,class_type,class_name ,class_area,class_depa,class_participation,
		class_starttime,class_img,class_sd ,class_cd,class_detail,class_week,class_time,
		class_price,class_termin)
		VALUES(
		#{seq},sysdate,#{class_member_seq},#{class_type},#{class_name },#{class_area},
		#{class_depa},#{class_participation},#{class_starttime},#{class_img},#{class_sd },
		#{class_cd},#{class_detail},#{class_week},#{class_time},#{class_price},
		'N'
		)
	</insert>
	<insert id="s_classinsert" parameterType="ClassDto">
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			SELECT class_seq.nextval FROM DUAL
		</selectKey>
		INSERT INTO CLASS(
		seq,regdate,class_member_seq,class_type,class_name ,class_area,class_depa,class_participation,
		class_starttime,class_img,class_sd ,class_detail,
		class_termin)
		VALUES(
		#{seq},sysdate,#{class_member_seq},#{class_type},#{class_name },#{class_area},#{class_depa},#{class_participation},#{
		class_starttime},#{class_img},#{class_sd },#{class_detail},
		'N'
		)
	</insert>
	
	<!-- 강사들의 강의 10개만 불러오기 -->
	<select id="mainclasslist" parameterType="Map"
		resultType="ClassDto">
		SELECT 
	RANDOMS.SEQ,
	RANDOMS.CLASS_IMG,
	RANDOMS.CLASS_MEMBER_SEQ,
	RANDOMS.CLASS_CREATOR_NAME,
	RANDOMS.PROFILE_IMG,
	RANDOMS.CLASS_MEMBER_RATING,
	RANDOMS.CLASS_REVIEW_COUNT,
	RANDOMS.CLASS_NAME,
	RANDOMS.CLASS_INFO,
	RANDOMS.CLASS_AREA,
	RANDOMS.CLASS_TYPE,
	RANDOMS.CLASS_D_DAY,
	RANDOMS.CLASS_NOW_PARTICIPATION
FROM
(SELECT
		C.SEQ,
		C.CLASS_IMG,
		C.CLASS_MEMBER_SEQ,
		M.MEMBER_NAME AS
		CLASS_CREATOR_NAME,
		M.MEMBER_PROFILE AS PROFILE_IMG,
		NVL(R.CLASS_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(R.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		C.CLASS_TYPE,
		D_DAY.CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION
		FROM
		CLASS C,
		MEMBER M,
		(SELECT CLASS.SEQ, ROUND(AVG(REVIEW.REVIEW_RATING),1) AS CLASS_RATING,
		COUNT(REVIEW_CLASS_SEQ) AS CLASS_REVIEW_COUNT
		FROM
		REVIEW, CLASS
		WHERE REVIEW.REVIEW_CLASS_SEQ = CLASS.SEQ
		GROUP BY
		CLASS.SEQ) R,
		(SELECT
		CLASS.SEQ,(TO_CHAR(CLASS.CLASS_SD,'YYYYMMDD')-TO_CHAR(SYSDATE,'YYYYMMDD'))
		AS CLASS_D_DAY FROM CLASS) D_DAY,
		(SELECT
		CL.SEQ,COUNT(INC.INCLASS_CLASS_SEQ) AS CLASS_NOW_PARTICIPATION
		FROM
		INCLASS INC, CLASS CL
		WHERE INC.INCLASS_CLASS_SEQ = CL.SEQ
		GROUP BY
		CL.SEQ) PARTI
		WHERE
		C.SEQ = R.SEQ (+)
		AND C.CLASS_MEMBER_SEQ =
		M.MEMBER_SEQ(+)
		AND C.SEQ = D_DAY.SEQ
		AND C.SEQ = PARTI.SEQ (+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		AND C.CLASS_TYPE = 'C'
		ORDER BY DBMS_RANDOM.RANDOM)RANDOMS
		<![CDATA[
		WHERE ROWNUM <= 10
		]]>
	</select>

	<select id="mainwantlist" parameterType="Map"
		resultType="ClassDto">
			SELECT 
	RANDOMS.SEQ,
	RANDOMS.CLASS_IMG,
	RANDOMS.CLASS_CREATOR_NAME,
	RANDOMS.PROFILE_IMG,
	RANDOMS.CLASS_MEMBER_RATING,
	RANDOMS.CLASS_REVIEW_COUNT,
	RANDOMS.CLASS_NAME,
	RANDOMS.CLASS_INFO,
	RANDOMS.CLASS_AREA,
	RANDOMS.CLASS_TYPE,
	RANDOMS.CLASS_D_DAY,
	RANDOMS.CLASS_NOW_PARTICIPATION
FROM
(SELECT
		C.SEQ,
		C.CLASS_IMG,
		C.CLASS_MEMBER_SEQ,
		M.MEMBER_NAME AS
		CLASS_CREATOR_NAME,
		M.MEMBER_PROFILE AS PROFILE_IMG,
		NVL(R.CLASS_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(R.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		C.CLASS_TYPE,
		D_DAY.CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION
		FROM
		CLASS C,
		MEMBER M,
		(SELECT CLASS.SEQ, ROUND(AVG(REVIEW.REVIEW_RATING),1) AS CLASS_RATING,
		COUNT(REVIEW_CLASS_SEQ) AS CLASS_REVIEW_COUNT
		FROM
		REVIEW, CLASS
		WHERE REVIEW.REVIEW_CLASS_SEQ = CLASS.SEQ
		GROUP BY
		CLASS.SEQ) R,
		(SELECT
		CLASS.SEQ,(TO_CHAR(CLASS.CLASS_SD,'YYYYMMDD')-TO_CHAR(SYSDATE,'YYYYMMDD'))
		AS CLASS_D_DAY FROM CLASS) D_DAY,
		(SELECT
		CL.SEQ,COUNT(INC.INCLASS_CLASS_SEQ) AS CLASS_NOW_PARTICIPATION
		FROM
		INCLASS INC, CLASS CL
		WHERE INC.INCLASS_CLASS_SEQ = CL.SEQ
		GROUP BY
		CL.SEQ) PARTI
		WHERE
		C.SEQ = R.SEQ (+)
		AND C.CLASS_MEMBER_SEQ =
		M.MEMBER_SEQ(+)
		AND C.SEQ = D_DAY.SEQ
		AND C.SEQ = PARTI.SEQ (+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		AND C.CLASS_TYPE = 'W'
		ORDER BY DBMS_RANDOM.RANDOM)RANDOMS
		<![CDATA[
		WHERE ROWNUM <= 10
		]]>
	</select>
	<select id="mainstudylist" parameterType="Map"
		resultType="ClassDto">
			SELECT 
	RANDOMS.SEQ,
	RANDOMS.CLASS_IMG,
	RANDOMS.CLASS_CREATOR_NAME,
	RANDOMS.PROFILE_IMG,
	RANDOMS.CLASS_MEMBER_RATING,
	RANDOMS.CLASS_REVIEW_COUNT,
	RANDOMS.CLASS_NAME,
	RANDOMS.CLASS_INFO,
	RANDOMS.CLASS_AREA,
	RANDOMS.CLASS_TYPE,
	RANDOMS.CLASS_D_DAY,
	RANDOMS.CLASS_NOW_PARTICIPATION
FROM
(SELECT
		C.SEQ,
		C.CLASS_IMG,
		C.CLASS_MEMBER_SEQ,
		M.MEMBER_NAME AS
		CLASS_CREATOR_NAME,
		M.MEMBER_PROFILE AS PROFILE_IMG,
		NVL(R.CLASS_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(R.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		C.CLASS_TYPE,
		D_DAY.CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION
		FROM
		CLASS C,
		MEMBER M,
		(SELECT CLASS.SEQ, ROUND(AVG(REVIEW.REVIEW_RATING),1) AS CLASS_RATING,
		COUNT(REVIEW_CLASS_SEQ) AS CLASS_REVIEW_COUNT
		FROM
		REVIEW, CLASS
		WHERE REVIEW.REVIEW_CLASS_SEQ = CLASS.SEQ
		GROUP BY
		CLASS.SEQ) R,
		(SELECT
		CLASS.SEQ,(TO_CHAR(CLASS.CLASS_SD,'YYYYMMDD')-TO_CHAR(SYSDATE,'YYYYMMDD'))
		AS CLASS_D_DAY FROM CLASS) D_DAY,
		(SELECT
		CL.SEQ,COUNT(INC.INCLASS_CLASS_SEQ) AS CLASS_NOW_PARTICIPATION
		FROM
		INCLASS INC, CLASS CL
		WHERE INC.INCLASS_CLASS_SEQ = CL.SEQ
		GROUP BY
		CL.SEQ) PARTI
		WHERE
		C.SEQ = R.SEQ (+)
		AND C.CLASS_MEMBER_SEQ =
		M.MEMBER_SEQ(+)
		AND C.SEQ = D_DAY.SEQ
		AND C.SEQ = PARTI.SEQ (+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		AND C.CLASS_TYPE = 'S'
		ORDER BY DBMS_RANDOM.RANDOM)RANDOMS
		<![CDATA[
		WHERE ROWNUM <= 10
		]]>
	</select>

	<!--강의 상세보기 페이지 -->
	<select id="getCdetail" parameterType="int"
		resultType="ClassDto">
		   SELECT
		d.member_name as class_creator_name,D.member_profile as profile_img
		,d.member_info,
		A.CLASS_TYPE, A.SEQ, A.CLASS_NAME, A.REGDATE, A.CLASS_INFO,
		A.CLASS_AREA,
		A.CLASS_DEPA , TO_CHAR(A.CLASS_SD,'YYYY-MM-DD') as CLASS_SD,
        TO_CHAR(A.CLASS_CD,'YYYY-MM-DD') as CLASS_CD, A.CLASS_WEEK,
		A.CLASS_STARTTIME
		, A.CLASS_TIME
		, A.CLASS_PRICE, A.CLASS_PARTICIPATION,
		A.CLASS_DETAIL, A.CLASS_IMG ,
		A.CLASS_HASHTAG,
		A.CLASS_TERMIN,A.CLASS_MEMBER_SEQ
		, B.CLASS_MEMBER_RATING
		,C.CLASS_NOW_PARTICIPATION , C.CLASS_D_DAY
		FROM
        (SELECT CLASS_TYPE,SEQ, CLASS_NAME, REGDATE, CLASS_INFO,
        CLASS_AREA,CLASS_DEPA , CLASS_SD,CLASS_CD, CLASS_WEEK,
        CLASS_STARTTIME ,CLASS_TIME, CLASS_PRICE,
		CLASS_PARTICIPATION, CLASS_DETAIL, CLASS_IMG ,
		CLASS_HASHTAG,CLASS_TERMIN,CLASS_MEMBER_SEQ FROM CLASS WHERE SEQ = #{class_seq}) A,
        
		(SELECT B.CLASS_MEMBER_SEQ,ROUND(AVG(REVIEW_RATING),1) AS
		CLASS_MEMBER_RATING	FROM REVIEW A,CLASS B 
         GROUP BY CLASS_MEMBER_SEQ) B, --WHERE A.REVIEW_CLASS_SEQ = B.SEQ
        
		(SELECT SEQ,(SELECT COUNT(INCLASS.INCLASS_CLASS_SEQ) FROM INCLASS
		WHERE INCLASS.INCLASS_CLASS_SEQ =#{class_seq}) AS CLASS_NOW_PARTICIPATION,
		(TO_CHAR(CLASS.CLASS_SD,'YYYYMMDD')-TO_CHAR(SYSDATE,'YYYYMMDD')) AS
		CLASS_D_DAY FROM CLASS) C,
		(select a.member_name, a.MEMBER_PROFILE, a.member_info from member a,class b
		 where b.SEQ = #{class_seq} and a.member_seq = b.class_member_seq) d
		WHERE
        B.CLASS_MEMBER_SEQ = A.CLASS_MEMBER_SEQ
        
		AND A.SEQ =C.SEQ ORDER BY REGDATE
	</select>
	
	<!-- 강의 상세보기 페이지-강사가 진행했던 강의의 후기 리스트 -->
	<select id="getCreview" parameterType="int" resultType="ReviewDto">
		select * from(
		SELECT review.review_class_seq, REVIEW.REVIEW_SEQ, REVIEW.REVIEW_MEMBER_SEQ,
		 REVIEW.REVIEW_RATING, REVIEW.REVIEW_DETAIL, REVIEW.REVIEW_DELFLAG,
		  REVIEW.REVIEW_REGDATE,
          member.member_name,member.member_profile as profile_img
		  FROM REVIEW, MEMBER 
		  WHERE REVIEW.REVIEW_CLASS_SEQ = #{class_seq} and          
          member.member_seq = review.review_member_seq order by REVIEW_REGDATE) where rownum<![CDATA[<=]]>5
	</select>
	
	<!-- 검색리스트 -->
	<select id="searchlist" parameterType="Map"
		resultType="ClassDto">
		SELECT
		ROWNUMS.CLASS_MEMBER_SEQ,
		ROWNUMS.SEQ,
		ROWNUMS.CLASS_TYPE,
		ROWNUMS.PROFILE_IMG,
		ROWNUMS.CLASS_CREATOR_NAME,
		ROWNUMS.CLASS_NAME,
		ROWNUMS.CLASS_IMG,
		ROWNUMS.CLASS_INFO,
		ROWNUMS.CLASS_AREA,
		ROWNUMS.CLASS_D_DAY,
		ROWNUMS.CLASS_NOW_PARTICIPATION,
		ROWNUMS.CLASS_MEMBER_RATING,
		ROWNUMS.CLASS_REVIEW_COUNT
		FROM
		(SELECT
		ROWNUM AS RN,
		ALLLIST.SEQ,
		ALLLIST.CLASS_TYPE,
		ALLLIST.CLASS_MEMBER_SEQ,
		ALLLIST.PROFILE_IMG,
		ALLLIST.CLASS_IMG,
		ALLLIST.CLASS_CREATOR_NAME,
		ALLLIST.CLASS_NAME,
		ALLLIST.CLASS_INFO,
		ALLLIST.CLASS_AREA,
		ALLLIST.CLASS_D_DAY,
		ALLLIST.CLASS_NOW_PARTICIPATION,
		ALLLIST.CLASS_MEMBER_RATING,
		ALLLIST.CLASS_REVIEW_COUNT
		FROM
		(SELECT
		C.SEQ,
		C.CLASS_TYPE,
		M.MEMBER_SEQ AS CLASS_MEMBER_SEQ,
		M.MEMBER_PROFILE AS PROFILE_IMG,
		M.MEMBER_NAME AS CLASS_CREATOR_NAME,
		C.CLASS_IMG,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		(TO_CHAR(C.CLASS_SD,
		'YYYYMMDD')-TO_CHAR(SYSDATE, 'YYYYMMDD')) AS CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION,
		NVL(RATING.CLASS_MEMBER_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(REVIEW_COUNT.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT
		FROM
		CLASS C,
		MEMBER M,
		(SELECT CL.SEQ, COUNT(INC.INCLASS_CLASS_SEQ) AS
		CLASS_NOW_PARTICIPATION FROM
		INCLASS INC, CLASS CL WHERE
		INC.INCLASS_CLASS_SEQ = CL.SEQ GROUP BY
		CL.SEQ) PARTI,
		(SELECT
		B.CLASS_MEMBER_SEQ,ROUND(AVG(REVIEW_RATING),1) AS CLASS_MEMBER_RATING
		FROM REVIEW A,CLASS B WHERE A.REVIEW_CLASS_SEQ = B.SEQ GROUP BY
		CLASS_MEMBER_SEQ) RATING,
		(SELECT
		REVIEW.REVIEW_CLASS_SEQ,COUNT(REVIEW.REVIEW_CLASS_SEQ) AS
		CLASS_REVIEW_COUNT FROM REVIEW, CLASS WHERE CLASS.SEQ =
		REVIEW.REVIEW_CLASS_SEQ GROUP BY REVIEW.REVIEW_CLASS_SEQ) REVIEW_COUNT
		WHERE
		C.CLASS_MEMBER_SEQ = M.MEMBER_SEQ
		AND C.SEQ = PARTI.SEQ(+)
		AND
		M.MEMBER_SEQ = RATING.CLASS_MEMBER_SEQ(+)
		AND C.SEQ =
		REVIEW_COUNT.REVIEW_CLASS_SEQ(+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		<if test="classType != null">
			AND C.CLASS_TYPE = #{classType}
		</if>
		<if test="selArea != null">
			AND REGEXP_LIKE (C.CLASS_AREA,#{selArea})
		</if>
		) ALLLIST
		<where>
			<if test="search != null">
				ALLLIST.CLASS_CREATOR_NAME LIKE '%'||#{search}||'%'
				OR
				ALLLIST.CLASS_NAME LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_INFO LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_AREA LIKE '%'||#{search}||'%'
			</if>
		</where>
		)ROWNUMS
		<where>
			CEIL(ROWNUMS.RN/12)=#{count}
		</where>
	</select>
	<!-- PAGEING COUNT -->
	<select id="pageCount" parameterType="Map" resultType="int">
		SELECT
		COUNT(*)
		FROM
		(SELECT
		C.SEQ,
		M.MEMBER_SEQ AS CLASS_MEMBER_SEQ,
		M.MEMBER_PROFILE AS
		PROFILE_IMG,
		M.MEMBER_NAME AS CLASS_CREATOR_NAME,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		(TO_CHAR(C.CLASS_SD,
		'YYYYMMDD')-TO_CHAR(SYSDATE, 'YYYYMMDD')) AS CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION,
		NVL(RATING.CLASS_MEMBER_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(REVIEW_COUNT.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT
		FROM
		CLASS
		C,
		MEMBER M,
		(SELECT CL.SEQ, COUNT(INC.INCLASS_CLASS_SEQ) AS
		CLASS_NOW_PARTICIPATION FROM
		INCLASS INC, CLASS CL WHERE
		INC.INCLASS_CLASS_SEQ = CL.SEQ GROUP BY
		CL.SEQ) PARTI,
		(SELECT
		B.CLASS_MEMBER_SEQ,ROUND(AVG(REVIEW_RATING),1) AS CLASS_MEMBER_RATING
		FROM REVIEW A,CLASS B WHERE A.REVIEW_CLASS_SEQ = B.SEQ GROUP BY
		CLASS_MEMBER_SEQ) RATING,
		(SELECT
		REVIEW.REVIEW_CLASS_SEQ,COUNT(REVIEW.REVIEW_CLASS_SEQ) AS
		CLASS_REVIEW_COUNT FROM REVIEW, CLASS WHERE CLASS.SEQ =
		REVIEW.REVIEW_CLASS_SEQ GROUP BY REVIEW.REVIEW_CLASS_SEQ) REVIEW_COUNT
		WHERE
		C.CLASS_MEMBER_SEQ = M.MEMBER_SEQ
		AND C.SEQ = PARTI.SEQ(+)
		AND
		M.MEMBER_SEQ = RATING.CLASS_MEMBER_SEQ(+)
		AND C.SEQ =
		REVIEW_COUNT.REVIEW_CLASS_SEQ(+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		<if test="classType != null">
			AND C.CLASS_TYPE = #{classType}
		</if>
		<if test="selArea != null">
			AND REGEXP_LIKE (C.CLASS_AREA,#{selArea})
		</if>
		) ALLLIST
		<where>
			<if test="search != null">
				ALLLIST.CLASS_CREATOR_NAME LIKE '%'||#{search}||'%'
				OR
				ALLLIST.CLASS_NAME LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_INFO LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_AREA LIKE '%'||#{search}||'%'
			</if>
		</where>
	</select>
	<!-- 지역검색 -->
	<select id="areaCount" parameterType="Map" resultType="ClassDto">
		SELECT
		ALLLIST.CLASS_AREA,
		COUNT(ALLLIST.CLASS_AREA) AS CLASS_AREA_COUNT
		FROM
		(SELECT
		C.SEQ,
		C.CLASS_TYPE,
		M.MEMBER_SEQ AS CLASS_MEMBER_SEQ,
		M.MEMBER_PROFILE AS PROFILE_IMG,
		M.MEMBER_NAME AS CLASS_CREATOR_NAME,
		C.CLASS_NAME,
		C.CLASS_INFO,
		C.CLASS_AREA,
		(TO_CHAR(C.CLASS_SD,
		'YYYYMMDD')-TO_CHAR(SYSDATE, 'YYYYMMDD')) AS CLASS_D_DAY,
		NVL(PARTI.CLASS_NOW_PARTICIPATION,0) AS CLASS_NOW_PARTICIPATION,
		NVL(RATING.CLASS_MEMBER_RATING,0) AS CLASS_MEMBER_RATING,
		NVL(REVIEW_COUNT.CLASS_REVIEW_COUNT,0) AS CLASS_REVIEW_COUNT
		FROM
		CLASS C,
		MEMBER M,
		(SELECT CL.SEQ, COUNT(INC.INCLASS_CLASS_SEQ) AS
		CLASS_NOW_PARTICIPATION FROM
		INCLASS INC, CLASS CL WHERE
		INC.INCLASS_CLASS_SEQ = CL.SEQ GROUP BY
		CL.SEQ) PARTI,
		(SELECT
		B.CLASS_MEMBER_SEQ,ROUND(AVG(REVIEW_RATING),1) AS CLASS_MEMBER_RATING
		FROM REVIEW A,CLASS B WHERE A.REVIEW_CLASS_SEQ = B.SEQ GROUP BY
		CLASS_MEMBER_SEQ) RATING,
		(SELECT
		REVIEW.REVIEW_CLASS_SEQ,COUNT(REVIEW.REVIEW_CLASS_SEQ) AS
		CLASS_REVIEW_COUNT FROM REVIEW, CLASS WHERE CLASS.SEQ =
		REVIEW.REVIEW_CLASS_SEQ GROUP BY REVIEW.REVIEW_CLASS_SEQ) REVIEW_COUNT
		WHERE
		C.CLASS_MEMBER_SEQ = M.MEMBER_SEQ
		AND C.SEQ = PARTI.SEQ(+)
		AND
		M.MEMBER_SEQ = RATING.CLASS_MEMBER_SEQ(+)
		AND C.SEQ =
		REVIEW_COUNT.REVIEW_CLASS_SEQ(+)
		<if test="department != null">
			AND C.CLASS_DEPA = #{department}
		</if>
		<if test="classType != null">
			AND C.CLASS_TYPE = #{classType}
		</if>
		<if test="selArea != null">
			AND REGEXP_LIKE (C.CLASS_AREA,#{selArea})
		</if>
		) ALLLIST
		<where>
			<if test="search != null">
				ALLLIST.CLASS_CREATOR_NAME LIKE '%'||#{search}||'%'
				OR
				ALLLIST.CLASS_NAME LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_INFO LIKE '%'||#{search}||'%'
				OR ALLLIST.CLASS_AREA LIKE '%'||#{search}||'%'
			</if>
		</where>
		GROUP BY ALLLIST.CLASS_AREA
	</select>
	
	<!-- 내 전체 일정보기 -->
	<select id="myschedule" parameterType="Map" resultType="CalendarDto">
	SELECT
      C.CLASS_NAME,
      EXTRACT(YEAR FROM ALLDAY.DAYS) YEARS,
      EXTRACT(MONTH FROM ALLDAY.DAYS) MONTHS,
      EXTRACT(DAY FROM ALLDAY.DAYS) DAYS,
      ALLDAY.SCHEDULEWEEK,
      C.CLASS_STARTTIME
   FROM
      CLASS C,
   (SELECT
      C.CLASS_SD + LEVEL -1 AS DAYS, TO_CHAR(C.CLASS_SD + LEVEL -1,'D') AS SCHEDULEWEEK
   FROM
      (SELECT
         CLASS_SD, CLASS_CD, CLASS_WEEK
      FROM
         CLASS
      WHERE
         CLASS.SEQ = #{classSeq}) C
   <![CDATA[
   CONNECT BY LEVEL <= C.CLASS_CD - C.CLASS_SD +1) ALLDAY
   ]]>
   WHERE
      C.SEQ = #{classSeq}
   AND EXTRACT(MONTH FROM ALLDAY.DAYS) = #{month}
   AND REGEXP_LIKE(ALLDAY.SCHEDULEWEEK, C.CLASS_WEEK)
	</select>
</mapper>